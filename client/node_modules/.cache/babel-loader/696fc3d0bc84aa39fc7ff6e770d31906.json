{"ast":null,"code":"import _classCallCheck from \"c:\\\\Users\\\\Jack Caldwell\\\\Dream-Stream\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"c:\\\\Users\\\\Jack Caldwell\\\\Dream-Stream\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport auth0 from 'auth0-js';\nimport history from '../history';\nimport { AUTH_CONFIG } from './auth0-variables';\n\nvar Auth =\n/*#__PURE__*/\nfunction () {\n  function Auth() {\n    _classCallCheck(this, Auth);\n\n    this.auth0 = new auth0.WebAuth({\n      domain: AUTH_CONFIG.domain,\n      clientID: AUTH_CONFIG.clientId,\n      redirectUri: AUTH_CONFIG.callbackUrl,\n      responseType: 'token id_token',\n      scope: 'openid profile'\n    });\n    this.login = this.login.bind(this);\n    this.logout = this.logout.bind(this);\n    this.handleAuthentication = this.handleAuthentication.bind(this);\n    this.isAuthenticated = this.isAuthenticated.bind(this);\n    this.getAccessToken = this.getAccessToken.bind(this);\n    this.getIdToken = this.getIdToken.bind(this);\n    this.renewSession = this.renewSession.bind(this);\n    this.getProfile = this.getProfile.bind(this);\n  }\n\n  _createClass(Auth, [{\n    key: \"login\",\n    value: function login() {\n      this.auth0.authorize();\n    }\n  }, {\n    key: \"handleAuthentication\",\n    value: function handleAuthentication() {\n      var _this = this;\n\n      this.auth0.parseHash(function (err, authResult) {\n        if (authResult && authResult.accessToken && authResult.idToken) {\n          _this.setSession(authResult);\n        } else if (err) {\n          history.replace('/');\n          console.log(err);\n          alert(\"Error: \".concat(err.error, \". Check the console for further details.\"));\n        }\n      });\n    }\n  }, {\n    key: \"getAccessToken\",\n    value: function getAccessToken() {\n      return this.accessToken;\n    }\n  }, {\n    key: \"getIdToken\",\n    value: function getIdToken() {\n      return this.idToken;\n    }\n  }, {\n    key: \"setSession\",\n    value: function setSession(authResult) {\n      // Set isLoggedIn flag in localStorage\n      localStorage.setItem('isLoggedIn', 'true'); // Set the time that the access token will expire at\n\n      var expiresAt = authResult.expiresIn * 32000 + new Date().getTime();\n      this.accessToken = authResult.accessToken;\n      this.idToken = authResult.idToken;\n      this.expiresAt = expiresAt; // navigate to the home route\n\n      history.replace('/');\n    }\n  }, {\n    key: \"renewSession\",\n    value: function renewSession() {\n      var _this2 = this;\n\n      this.auth0.checkSession({}, function (err, authResult) {\n        if (authResult && authResult.accessToken && authResult.idToken) {\n          _this2.setSession(authResult);\n        } else if (err) {\n          _this2.logout();\n\n          console.log(err);\n          alert(\"Could not get a new token (\".concat(err.error, \": \").concat(err.error_description, \").\"));\n        }\n      });\n    }\n  }, {\n    key: \"getProfile\",\n    value: function getProfile(cb) {\n      var _this3 = this;\n\n      this.auth0.client.userInfo(this.accessToken, function (err, profile) {\n        if (profile) {\n          _this3.userProfile = profile;\n        }\n\n        cb(err, profile);\n      });\n    }\n  }, {\n    key: \"logout\",\n    value: function logout() {\n      // Remove tokens and expiry time\n      this.accessToken = null;\n      this.idToken = null;\n      this.expiresAt = 0;\n      this.userProfile = null; // Remove isLoggedIn flag from localStorage\n\n      localStorage.removeItem('isLoggedIn'); // navigate to the home route\n\n      history.replace('/');\n    }\n  }, {\n    key: \"isAuthenticated\",\n    value: function isAuthenticated() {\n      // Check whether the current time is past the access token's expiry time\n      var expiresAt = this.expiresAt;\n      return new Date().getTime() < expiresAt;\n    }\n  }]);\n\n  return Auth;\n}();\n\nexport { Auth as default };","map":{"version":3,"sources":["c:\\Users\\Jack Caldwell\\Dream-Stream\\client\\src\\utils\\Auth\\Auth.js"],"names":["auth0","history","AUTH_CONFIG","Auth","WebAuth","domain","clientID","clientId","redirectUri","callbackUrl","responseType","scope","login","bind","logout","handleAuthentication","isAuthenticated","getAccessToken","getIdToken","renewSession","getProfile","authorize","parseHash","err","authResult","accessToken","idToken","setSession","replace","console","log","alert","error","localStorage","setItem","expiresAt","expiresIn","Date","getTime","checkSession","error_description","cb","client","userInfo","profile","userProfile","removeItem"],"mappings":"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","sourcesContent":["import auth0 from 'auth0-js';\nimport history from '../history';\nimport { AUTH_CONFIG } from './auth0-variables';\n\nexport default class Auth {\n    accessToken;\n    idToken;\n    expiresAt;\n    userProfile;\n\n    auth0 = new auth0.WebAuth({\n        domain: AUTH_CONFIG.domain,\n        clientID: AUTH_CONFIG.clientId,\n        redirectUri: AUTH_CONFIG.callbackUrl,\n        responseType: 'token id_token',\n        scope: 'openid profile'\n    });\n\n    constructor() {\n        this.login = this.login.bind(this);\n        this.logout = this.logout.bind(this);\n        this.handleAuthentication = this.handleAuthentication.bind(this);\n        this.isAuthenticated = this.isAuthenticated.bind(this);\n        this.getAccessToken = this.getAccessToken.bind(this);\n        this.getIdToken = this.getIdToken.bind(this);\n        this.renewSession = this.renewSession.bind(this);\n        this.getProfile = this.getProfile.bind(this);\n    }\n\n    login() {\n        this.auth0.authorize();\n    }\n\n    handleAuthentication() {\n        this.auth0.parseHash((err, authResult) => {\n            if (authResult && authResult.accessToken && authResult.idToken) {\n                this.setSession(authResult);\n            } else if (err) {\n                history.replace('/');\n                console.log(err);\n                alert(`Error: ${err.error}. Check the console for further details.`);\n            }\n        });\n    }\n\n    getAccessToken() {\n        return this.accessToken;\n    }\n\n    getIdToken() {\n        return this.idToken;\n    }\n\n    setSession(authResult) {\n        // Set isLoggedIn flag in localStorage\n        localStorage.setItem('isLoggedIn', 'true');\n\n        // Set the time that the access token will expire at\n        let expiresAt = (authResult.expiresIn * 32000) + new Date().getTime();\n        this.accessToken = authResult.accessToken;\n        this.idToken = authResult.idToken;\n        this.expiresAt = expiresAt;\n\n        // navigate to the home route\n        history.replace('/');\n    }\n\n    renewSession() {\n        this.auth0.checkSession({}, (err, authResult) => {\n            if (authResult && authResult.accessToken && authResult.idToken) {\n                this.setSession(authResult);\n            } else if (err) {\n                this.logout();\n                console.log(err);\n                alert(`Could not get a new token (${err.error}: ${err.error_description}).`);\n            }\n        });\n    }\n\n    getProfile(cb) {\n        this.auth0.client.userInfo(this.accessToken, (err, profile) => {\n            if (profile) {\n                this.userProfile = profile;\n            }\n            cb(err, profile);\n        });\n    }\n\n    logout() {\n        // Remove tokens and expiry time\n        this.accessToken = null;\n        this.idToken = null;\n        this.expiresAt = 0;\n        this.userProfile = null;\n\n        // Remove isLoggedIn flag from localStorage\n        localStorage.removeItem('isLoggedIn');\n\n        // navigate to the home route\n        history.replace('/');\n    }\n\n    isAuthenticated() {\n        // Check whether the current time is past the access token's expiry time\n        let expiresAt = this.expiresAt;\n        return new Date().getTime() < expiresAt;\n    }\n}\n"]},"metadata":{},"sourceType":"module"}