{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _react = _interopRequireWildcard(require(\"react\"));\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar _classnames = _interopRequireDefault(require(\"classnames\"));\n\nvar _constants = _interopRequireDefault(require(\"./constants\"));\n\nvar _Icon = _interopRequireDefault(require(\"./Icon\"));\n\nvar _idgen = _interopRequireDefault(require(\"./idgen\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  } else {\n    var newObj = {};\n\n    if (obj != null) {\n      for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\n          var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {};\n\n          if (desc.get || desc.set) {\n            Object.defineProperty(newObj, key, desc);\n          } else {\n            newObj[key] = obj[key];\n          }\n        }\n      }\n    }\n\n    newObj.default = obj;\n    return newObj;\n  }\n}\n\nfunction _typeof(obj) {\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nvar Autocomplete =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Autocomplete, _Component);\n\n  function Autocomplete(props) {\n    var _this;\n\n    _classCallCheck(this, Autocomplete);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Autocomplete).call(this, props));\n    _this.state = {\n      value: props.value || '',\n      itemSelected: false\n    };\n    _this.renderIcon = _this.renderIcon.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.renderDropdown = _this.renderDropdown.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this._onChange = _this._onChange.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(Autocomplete, [{\n    key: \"componentWillReceiveProps\",\n    value: function componentWillReceiveProps(_ref) {\n      var value = _ref.value;\n\n      if (value !== undefined) {\n        this.setState({\n          value: value\n        });\n      }\n    }\n  }, {\n    key: \"renderIcon\",\n    value: function renderIcon(icon, iconClassName) {\n      return _react.default.createElement(_Icon.default, {\n        className: iconClassName\n      }, icon);\n    }\n  }, {\n    key: \"renderDropdown\",\n    value: function renderDropdown(data, minLength, limit) {\n      var _this2 = this;\n\n      var _this$state = this.state,\n          value = _this$state.value,\n          itemSelected = _this$state.itemSelected;\n\n      if (minLength && minLength > value.length || !value || itemSelected) {\n        return null;\n      }\n\n      var matches = Object.keys(data).filter(function (key) {\n        var index = key.toUpperCase().indexOf(value.toUpperCase());\n        return index !== -1 && value.length < key.length;\n      });\n      if (limit) matches = matches.slice(0, limit);\n\n      if (matches.length === 0) {\n        return null;\n      }\n\n      return _react.default.createElement(\"ul\", {\n        className: \"autocomplete-content dropdown-content\"\n      }, matches.map(function (key, idx) {\n        var index = key.toUpperCase().indexOf(value.toUpperCase());\n        return _react.default.createElement(\"li\", {\n          key: key + '_' + idx,\n          onClick: _this2._onAutocomplete.bind(_this2, key)\n        }, data[key] ? _react.default.createElement(\"img\", {\n          src: data[key],\n          className: \"right circle\"\n        }) : null, _react.default.createElement(\"span\", null, index !== 0 ? key.substring(0, index) : '', _react.default.createElement(\"span\", {\n          className: \"highlight\"\n        }, value), key.length !== index + value.length ? key.substring(index + value.length) : ''));\n      }));\n    }\n  }, {\n    key: \"_onChange\",\n    value: function _onChange(evt) {\n      var onChange = this.props.onChange;\n      var value = evt.target.value;\n\n      if (onChange) {\n        onChange(evt, value);\n      }\n\n      this.setState({\n        value: value,\n        itemSelected: false\n      });\n    }\n  }, {\n    key: \"_onAutocomplete\",\n    value: function _onAutocomplete(value, evt) {\n      var _this$props = this.props,\n          onChange = _this$props.onChange,\n          onAutocomplete = _this$props.onAutocomplete;\n\n      if (onAutocomplete) {\n        onAutocomplete(value);\n      }\n\n      if (onChange) {\n        onChange(evt, value);\n      }\n\n      this.setState({\n        value: value,\n        itemSelected: true\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props2 = this.props,\n          id = _this$props2.id,\n          className = _this$props2.className,\n          title = _this$props2.title,\n          data = _this$props2.data,\n          icon = _this$props2.icon,\n          iconClassName = _this$props2.iconClassName,\n          s = _this$props2.s,\n          m = _this$props2.m,\n          l = _this$props2.l,\n          offset = _this$props2.offset,\n          minLength = _this$props2.minLength,\n          placeholder = _this$props2.placeholder,\n          limit = _this$props2.limit,\n          value = _this$props2.value,\n          onChange = _this$props2.onChange,\n          onAutocomplete = _this$props2.onAutocomplete,\n          props = _objectWithoutProperties(_this$props2, [\"id\", \"className\", \"title\", \"data\", \"icon\", \"iconClassName\", \"s\", \"m\", \"l\", \"offset\", \"minLength\", \"placeholder\", \"limit\", \"value\", \"onChange\", \"onAutocomplete\"]);\n\n      var _id = id || \"autocomplete-\".concat((0, _idgen.default)());\n\n      var sizes = {\n        s: s,\n        m: m,\n        l: l\n      };\n      var classes = {\n        col: true\n      };\n\n      _constants.default.SIZES.forEach(function (size) {\n        classes[size + sizes[size]] = sizes[size];\n      });\n\n      return _react.default.createElement(\"div\", _extends({\n        offset: offset,\n        className: (0, _classnames.default)('input-field', className, classes)\n      }, props), icon && this.renderIcon(icon, iconClassName), _react.default.createElement(\"input\", {\n        placeholder: placeholder,\n        className: \"autocomplete\",\n        id: _id,\n        onChange: this._onChange,\n        type: \"text\",\n        value: this.state.value\n      }), _react.default.createElement(\"label\", {\n        htmlFor: _id\n      }, title), this.renderDropdown(data, minLength, limit));\n    }\n  }]);\n\n  return Autocomplete;\n}(_react.Component);\n\nAutocomplete.propTypes = {\n  /**\n   * Uniquely identifies <input> generated by this component\n   * Used by corresponding <label> for attribute\n   */\n  id: _propTypes.default.string,\n  className: _propTypes.default.string,\n\n  /*\n   * The title of the autocomplete component.\n   */\n  title: _propTypes.default.string,\n\n  /*\n   * An object with the keys of the items to match in autocomplete\n   * The values are either null or a location to an image\n   */\n  data: _propTypes.default.object.isRequired,\n\n  /*\n   * Optional materialize icon to add to the autocomplete bar\n   */\n  icon: _propTypes.default.string,\n  iconClassName: _propTypes.default.string,\n  s: _propTypes.default.number,\n  m: _propTypes.default.number,\n  l: _propTypes.default.number,\n  offset: _propTypes.default.string,\n\n  /*\n   * Determine input length before dropdown\n   */\n  minLength: _propTypes.default.number,\n\n  /**\n   * The max amount of results that can be shown at once. Default: Infinity\n   * */\n  limit: _propTypes.default.number,\n\n  /**\n   * Placeholder for input element\n   * */\n  placeholder: _propTypes.default.string,\n\n  /**\n   * Called when the value of the input gets changed - by user typing or clicking on an auto-complete item.\n   * Function signature: (event, value) => ()\n   */\n  onChange: _propTypes.default.func,\n\n  /**\n   * Called when auto-completed item is selected.\n   * Function signature: (value) => ()\n   */\n  onAutocomplete: _propTypes.default.func,\n\n  /**\n   * The value of the input\n   */\n  value: _propTypes.default.string\n};\nvar _default = Autocomplete;\nexports.default = _default;","map":null,"metadata":{},"sourceType":"script"}